//
// Withdrawal.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Withdrawal: Codable, Hashable {

    /** Status of the on-chain batch confirmation for this withdrawal */
    public private(set) var rollupStatus: String
    /** Ethereum address of the user who requested this withdrawal */
    public private(set) var sender: String
    /** Status of this withdrawal */
    public private(set) var status: String
    /** Time when this withdrawal was initiated */
    public private(set) var timestamp: String
    public private(set) var token: Token
    /** Sequential ID of this transaction */
    public private(set) var transactionId: Int
    /** Withdrawal has been transferred to user's Layer 1 wallet */
    public private(set) var withdrawnToWallet: Bool

    public init(rollupStatus: String, sender: String, status: String, timestamp: String, token: Token, transactionId: Int, withdrawnToWallet: Bool) {
        self.rollupStatus = rollupStatus
        self.sender = sender
        self.status = status
        self.timestamp = timestamp
        self.token = token
        self.transactionId = transactionId
        self.withdrawnToWallet = withdrawnToWallet
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case rollupStatus = "rollup_status"
        case sender
        case status
        case timestamp
        case token
        case transactionId = "transaction_id"
        case withdrawnToWallet = "withdrawn_to_wallet"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(rollupStatus, forKey: .rollupStatus)
        try container.encode(sender, forKey: .sender)
        try container.encode(status, forKey: .status)
        try container.encode(timestamp, forKey: .timestamp)
        try container.encode(token, forKey: .token)
        try container.encode(transactionId, forKey: .transactionId)
        try container.encode(withdrawnToWallet, forKey: .withdrawnToWallet)
    }
}

