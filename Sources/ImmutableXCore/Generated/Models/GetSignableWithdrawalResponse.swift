//
// GetSignableWithdrawalResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GetSignableWithdrawalResponse: Codable, Hashable {

    /** Amount of the token we are withdrawing */
    public private(set) var amount: String
    /** ID of the asset to be withdrawn */
    public private(set) var assetId: String
    /** Nonce of this transaction */
    public private(set) var nonce: Int
    /** Encoded payload hash */
    public private(set) var payloadHash: String
    /** Message to sign with L1 wallet to verity withdrawal request */
    public private(set) var signableMessage: String
    /** Public stark key of this user */
    public private(set) var starkKey: String
    /** ID of the vault we are withdrawing from */
    public private(set) var vaultId: Int

    public init(amount: String, assetId: String, nonce: Int, payloadHash: String, signableMessage: String, starkKey: String, vaultId: Int) {
        self.amount = amount
        self.assetId = assetId
        self.nonce = nonce
        self.payloadHash = payloadHash
        self.signableMessage = signableMessage
        self.starkKey = starkKey
        self.vaultId = vaultId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case amount
        case assetId = "asset_id"
        case nonce
        case payloadHash = "payload_hash"
        case signableMessage = "signable_message"
        case starkKey = "stark_key"
        case vaultId = "vault_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(amount, forKey: .amount)
        try container.encode(assetId, forKey: .assetId)
        try container.encode(nonce, forKey: .nonce)
        try container.encode(payloadHash, forKey: .payloadHash)
        try container.encode(signableMessage, forKey: .signableMessage)
        try container.encode(starkKey, forKey: .starkKey)
        try container.encode(vaultId, forKey: .vaultId)
    }
}

