//
// GetSignableTransferResponseV1.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GetSignableTransferResponseV1: Codable, Hashable {

    /** Amount of the asset being transferred */
    public private(set) var amount: String
    /** ID of the asset being transferred */
    public private(set) var assetId: String
    /** Token in request to match in SDK implementation */
    public private(set) var expirationTimestamp: Int
    /** Nonce of the transfer */
    public private(set) var nonce: Int
    /** Hash of the payload */
    public private(set) var payloadHash: String
    /** Receiver of the transfer */
    public private(set) var receiverStarkKey: String
    /** ID of the vault being transferred to */
    public private(set) var receiverVaultId: Int
    /** Sender of the transfer */
    public private(set) var senderStarkKey: String?
    /** ID of the vault being transferred from */
    public private(set) var senderVaultId: Int
    /** Message to sign with L1 wallet to confirm transfer request */
    public private(set) var signableMessage: String

    public init(amount: String, assetId: String, expirationTimestamp: Int, nonce: Int, payloadHash: String, receiverStarkKey: String, receiverVaultId: Int, senderStarkKey: String? = nil, senderVaultId: Int, signableMessage: String) {
        self.amount = amount
        self.assetId = assetId
        self.expirationTimestamp = expirationTimestamp
        self.nonce = nonce
        self.payloadHash = payloadHash
        self.receiverStarkKey = receiverStarkKey
        self.receiverVaultId = receiverVaultId
        self.senderStarkKey = senderStarkKey
        self.senderVaultId = senderVaultId
        self.signableMessage = signableMessage
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case amount
        case assetId = "asset_id"
        case expirationTimestamp = "expiration_timestamp"
        case nonce
        case payloadHash = "payload_hash"
        case receiverStarkKey = "receiver_stark_key"
        case receiverVaultId = "receiver_vault_id"
        case senderStarkKey = "sender_stark_key"
        case senderVaultId = "sender_vault_id"
        case signableMessage = "signable_message"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(amount, forKey: .amount)
        try container.encode(assetId, forKey: .assetId)
        try container.encode(expirationTimestamp, forKey: .expirationTimestamp)
        try container.encode(nonce, forKey: .nonce)
        try container.encode(payloadHash, forKey: .payloadHash)
        try container.encode(receiverStarkKey, forKey: .receiverStarkKey)
        try container.encode(receiverVaultId, forKey: .receiverVaultId)
        try container.encodeIfPresent(senderStarkKey, forKey: .senderStarkKey)
        try container.encode(senderVaultId, forKey: .senderVaultId)
        try container.encode(signableMessage, forKey: .signableMessage)
    }
}

