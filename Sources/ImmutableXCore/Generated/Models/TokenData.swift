//
// TokenData.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TokenData: Codable, Hashable {

    /** Number of decimals supported by this asset */
    public private(set) var decimals: Int?
    /** [DEPRECATED] Internal Immutable X Token ID */
    public private(set) var id: String?
    public private(set) var properties: AssetProperties?
    /** Quantity of this asset */
    public private(set) var quantity: String
    /** Quantity of this asset with the sum of all fees applied to the asset */
    public private(set) var quantityWithFees: String
    /** Address of ERC721/ERC20 contract */
    public private(set) var tokenAddress: String?
    /** ERC721 Token ID */
    public private(set) var tokenId: String?

    public init(decimals: Int? = nil, id: String? = nil, properties: AssetProperties? = nil, quantity: String, quantityWithFees: String, tokenAddress: String? = nil, tokenId: String? = nil) {
        self.decimals = decimals
        self.id = id
        self.properties = properties
        self.quantity = quantity
        self.quantityWithFees = quantityWithFees
        self.tokenAddress = tokenAddress
        self.tokenId = tokenId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case decimals
        case id
        case properties
        case quantity
        case quantityWithFees = "quantity_with_fees"
        case tokenAddress = "token_address"
        case tokenId = "token_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(decimals, forKey: .decimals)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(properties, forKey: .properties)
        try container.encode(quantity, forKey: .quantity)
        try container.encode(quantityWithFees, forKey: .quantityWithFees)
        try container.encodeIfPresent(tokenAddress, forKey: .tokenAddress)
        try container.encodeIfPresent(tokenId, forKey: .tokenId)
    }
}

