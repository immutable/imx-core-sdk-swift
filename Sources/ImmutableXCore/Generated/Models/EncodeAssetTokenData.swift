//
// EncodeAssetTokenData.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct EncodeAssetTokenData: Codable, Hashable {

    /** Blueprint information of the token to be encoded. Used if token is mintable. */
    public private(set) var blueprint: String?
    /** ID of the token to be encoded. Used if token is mintable. */
    public private(set) var id: String?
    /** Contract address of the token to be encoded */
    public private(set) var tokenAddress: String?
    /** TokenId of the token to be encoded. Used if token is non-mintable */
    public private(set) var tokenId: String?

    public init(blueprint: String? = nil, id: String? = nil, tokenAddress: String? = nil, tokenId: String? = nil) {
        self.blueprint = blueprint
        self.id = id
        self.tokenAddress = tokenAddress
        self.tokenId = tokenId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case blueprint
        case id
        case tokenAddress = "token_address"
        case tokenId = "token_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(blueprint, forKey: .blueprint)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(tokenAddress, forKey: .tokenAddress)
        try container.encodeIfPresent(tokenId, forKey: .tokenId)
    }
}

