//
// CreateOrderRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CreateOrderRequest: Codable, Hashable {

    /** Amount to buy */
    public private(set) var amountBuy: String
    /** Amount to sell */
    public private(set) var amountSell: String
    /** ID of the asset to buy */
    public private(set) var assetIdBuy: String
    /** ID of the asset to sell */
    public private(set) var assetIdSell: String
    /** Expiration timestamp for this order */
    public private(set) var expirationTimestamp: Int
    /** Fee information */
    public private(set) var fees: [FeeEntry]?
    /** Whether to include fees in order */
    public private(set) var includeFees: Bool?
    /** Nonce of the order */
    public private(set) var nonce: Int
    /** Public stark key of the user creating order */
    public private(set) var starkKey: String
    /** Payload signature */
    public private(set) var starkSignature: String
    /** ID of the vault into which the bought asset will be placed */
    public private(set) var vaultIdBuy: Int
    /** ID of the vault to sell from */
    public private(set) var vaultIdSell: Int

    public init(amountBuy: String, amountSell: String, assetIdBuy: String, assetIdSell: String, expirationTimestamp: Int, fees: [FeeEntry]? = nil, includeFees: Bool? = nil, nonce: Int, starkKey: String, starkSignature: String, vaultIdBuy: Int, vaultIdSell: Int) {
        self.amountBuy = amountBuy
        self.amountSell = amountSell
        self.assetIdBuy = assetIdBuy
        self.assetIdSell = assetIdSell
        self.expirationTimestamp = expirationTimestamp
        self.fees = fees
        self.includeFees = includeFees
        self.nonce = nonce
        self.starkKey = starkKey
        self.starkSignature = starkSignature
        self.vaultIdBuy = vaultIdBuy
        self.vaultIdSell = vaultIdSell
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case amountBuy = "amount_buy"
        case amountSell = "amount_sell"
        case assetIdBuy = "asset_id_buy"
        case assetIdSell = "asset_id_sell"
        case expirationTimestamp = "expiration_timestamp"
        case fees
        case includeFees = "include_fees"
        case nonce
        case starkKey = "stark_key"
        case starkSignature = "stark_signature"
        case vaultIdBuy = "vault_id_buy"
        case vaultIdSell = "vault_id_sell"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(amountBuy, forKey: .amountBuy)
        try container.encode(amountSell, forKey: .amountSell)
        try container.encode(assetIdBuy, forKey: .assetIdBuy)
        try container.encode(assetIdSell, forKey: .assetIdSell)
        try container.encode(expirationTimestamp, forKey: .expirationTimestamp)
        try container.encodeIfPresent(fees, forKey: .fees)
        try container.encodeIfPresent(includeFees, forKey: .includeFees)
        try container.encode(nonce, forKey: .nonce)
        try container.encode(starkKey, forKey: .starkKey)
        try container.encode(starkSignature, forKey: .starkSignature)
        try container.encode(vaultIdBuy, forKey: .vaultIdBuy)
        try container.encode(vaultIdSell, forKey: .vaultIdSell)
    }
}

