//
// CreateWithdrawalRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CreateWithdrawalRequest: Codable, Hashable {

    /** Amount to withdraw */
    public private(set) var amount: String
    /** The ID of asset the user is withdrawing */
    public private(set) var assetId: String
    /** Nonce of the withdrawal */
    public private(set) var nonce: Int
    /** Public stark key of the withdrawing user */
    public private(set) var starkKey: String
    /** Payload signature */
    public private(set) var starkSignature: String
    /** The ID of the vault the asset belong to */
    public private(set) var vaultId: Int

    public init(amount: String, assetId: String, nonce: Int, starkKey: String, starkSignature: String, vaultId: Int) {
        self.amount = amount
        self.assetId = assetId
        self.nonce = nonce
        self.starkKey = starkKey
        self.starkSignature = starkSignature
        self.vaultId = vaultId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case amount
        case assetId = "asset_id"
        case nonce
        case starkKey = "stark_key"
        case starkSignature = "stark_signature"
        case vaultId = "vault_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(amount, forKey: .amount)
        try container.encode(assetId, forKey: .assetId)
        try container.encode(nonce, forKey: .nonce)
        try container.encode(starkKey, forKey: .starkKey)
        try container.encode(starkSignature, forKey: .starkSignature)
        try container.encode(vaultId, forKey: .vaultId)
    }
}

