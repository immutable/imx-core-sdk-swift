//
// GetSignableTradeRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GetSignableTradeRequest: Codable, Hashable {

    /** ExpirationTimestamp in Unix time. Note: will be rounded down to the nearest hour */
    public private(set) var expirationTimestamp: Int?
    /** Inclusion of either maker or taker fees */
    public private(set) var fees: [FeeEntry]?
    /** The ID of the maker order involved */
    public private(set) var orderId: Int
    /** Ethereum address of the submitting user */
    public private(set) var user: String

    public init(expirationTimestamp: Int? = nil, fees: [FeeEntry]? = nil, orderId: Int, user: String) {
        self.expirationTimestamp = expirationTimestamp
        self.fees = fees
        self.orderId = orderId
        self.user = user
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case expirationTimestamp = "expiration_timestamp"
        case fees
        case orderId = "order_id"
        case user
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(expirationTimestamp, forKey: .expirationTimestamp)
        try container.encodeIfPresent(fees, forKey: .fees)
        try container.encode(orderId, forKey: .orderId)
        try container.encode(user, forKey: .user)
    }
}

