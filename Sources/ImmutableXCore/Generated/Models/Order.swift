//
// Order.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Order: Codable, Hashable {

    /** Amount of the asset already sold by this order */
    public private(set) var amountSold: String?
    public private(set) var buy: Token
    /** Expiration timestamp of this order */
    public private(set) var expirationTimestamp: String?
    /** Fee information for the order */
    public private(set) var fees: [OrderFeeInfo]?
    /** ID of the order */
    public private(set) var orderId: Int
    public private(set) var sell: Token
    /** Status of the order */
    public private(set) var status: String
    /** Timestamp this order was created */
    public private(set) var timestamp: String?
    /** Updated timestamp of this order */
    public private(set) var updatedTimestamp: String?
    /** Ethereum address of the user who submitted the order */
    public private(set) var user: String

    public init(amountSold: String?, buy: Token, expirationTimestamp: String?, fees: [OrderFeeInfo]? = nil, orderId: Int, sell: Token, status: String, timestamp: String?, updatedTimestamp: String?, user: String) {
        self.amountSold = amountSold
        self.buy = buy
        self.expirationTimestamp = expirationTimestamp
        self.fees = fees
        self.orderId = orderId
        self.sell = sell
        self.status = status
        self.timestamp = timestamp
        self.updatedTimestamp = updatedTimestamp
        self.user = user
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case amountSold = "amount_sold"
        case buy
        case expirationTimestamp = "expiration_timestamp"
        case fees
        case orderId = "order_id"
        case sell
        case status
        case timestamp
        case updatedTimestamp = "updated_timestamp"
        case user
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(amountSold, forKey: .amountSold)
        try container.encode(buy, forKey: .buy)
        try container.encode(expirationTimestamp, forKey: .expirationTimestamp)
        try container.encodeIfPresent(fees, forKey: .fees)
        try container.encode(orderId, forKey: .orderId)
        try container.encode(sell, forKey: .sell)
        try container.encode(status, forKey: .status)
        try container.encode(timestamp, forKey: .timestamp)
        try container.encode(updatedTimestamp, forKey: .updatedTimestamp)
        try container.encode(user, forKey: .user)
    }
}

