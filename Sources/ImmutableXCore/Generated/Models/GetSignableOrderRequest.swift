//
// GetSignableOrderRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GetSignableOrderRequest: Codable, Hashable {

    /** Fee-exclusive amount to buy the asset */
    public private(set) var amountBuy: String
    /** Amount to sell (quantity) */
    public private(set) var amountSell: String
    /** ExpirationTimestamp in Unix time. Note: will be rounded down to the nearest hour */
    public private(set) var expirationTimestamp: Int?
    /** Inclusion of either maker or taker fees */
    public private(set) var fees: [FeeEntry]?
    public private(set) var tokenBuy: SignableToken
    public private(set) var tokenSell: SignableToken
    /** Ethereum address of the submitting user */
    public private(set) var user: String

    public init(amountBuy: String, amountSell: String, expirationTimestamp: Int? = nil, fees: [FeeEntry]? = nil, tokenBuy: SignableToken, tokenSell: SignableToken, user: String) {
        self.amountBuy = amountBuy
        self.amountSell = amountSell
        self.expirationTimestamp = expirationTimestamp
        self.fees = fees
        self.tokenBuy = tokenBuy
        self.tokenSell = tokenSell
        self.user = user
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case amountBuy = "amount_buy"
        case amountSell = "amount_sell"
        case expirationTimestamp = "expiration_timestamp"
        case fees
        case tokenBuy = "token_buy"
        case tokenSell = "token_sell"
        case user
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(amountBuy, forKey: .amountBuy)
        try container.encode(amountSell, forKey: .amountSell)
        try container.encodeIfPresent(expirationTimestamp, forKey: .expirationTimestamp)
        try container.encodeIfPresent(fees, forKey: .fees)
        try container.encode(tokenBuy, forKey: .tokenBuy)
        try container.encode(tokenSell, forKey: .tokenSell)
        try container.encode(user, forKey: .user)
    }
}

