//
// MintRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MintRequest: Codable, Hashable {

    /** Signature from authorised minter */
    public private(set) var authSignature: String
    /** minting contract */
    public private(set) var contractAddress: String
    /** Global contract-level royalty fees */
    public private(set) var royalties: [MintFee]?
    /** Users to mint to */
    public private(set) var users: [MintUser]

    public init(authSignature: String, contractAddress: String, royalties: [MintFee]? = nil, users: [MintUser]) {
        self.authSignature = authSignature
        self.contractAddress = contractAddress
        self.royalties = royalties
        self.users = users
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case authSignature = "auth_signature"
        case contractAddress = "contract_address"
        case royalties
        case users
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(authSignature, forKey: .authSignature)
        try container.encode(contractAddress, forKey: .contractAddress)
        try container.encodeIfPresent(royalties, forKey: .royalties)
        try container.encode(users, forKey: .users)
    }
}

