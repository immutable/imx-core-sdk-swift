//
// Transfer.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Transfer: Codable, JSONEncodable, Hashable {

    public private(set) var data: TokenData
    /** Ethereum address of the user who received this transfer */
    public private(set) var receiver: String
    /** Status of the transaction */
    public private(set) var status: String
    /** Timestamp of the transfer */
    public private(set) var timestamp: String?
    /** Sequential transaction ID */
    public private(set) var transactionId: Int
    /** Type of this asset (ETH/ERC20/ERC721) */
    public private(set) var type: String
    /** Ethereum address of the user  who submitted this transfer */
    public private(set) var user: String

    public init(data: TokenData, receiver: String, status: String, timestamp: String?, transactionId: Int, type: String, user: String) {
        self.data = data
        self.receiver = receiver
        self.status = status
        self.timestamp = timestamp
        self.transactionId = transactionId
        self.type = type
        self.user = user
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case data
        case receiver
        case status
        case timestamp
        case transactionId = "transaction_id"
        case type
        case user
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(data, forKey: .data)
        try container.encode(receiver, forKey: .receiver)
        try container.encode(status, forKey: .status)
        try container.encode(timestamp, forKey: .timestamp)
        try container.encode(transactionId, forKey: .transactionId)
        try container.encode(type, forKey: .type)
        try container.encode(user, forKey: .user)
    }
}

