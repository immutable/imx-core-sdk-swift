//
// TradeSide.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TradeSide: Codable, Hashable {

    /** The ID of the order involved in the trade */
    public private(set) var orderId: Int
    /** The amount of that order's asset this trade sold */
    public private(set) var sold: String
    /** The contract address of the token that this trade sold */
    public private(set) var tokenAddress: String?
    /** The ID of the token that this trade sold */
    public private(set) var tokenId: String?
    /** The type of the token that this trade sold */
    public private(set) var tokenType: String

    public init(orderId: Int, sold: String, tokenAddress: String? = nil, tokenId: String? = nil, tokenType: String) {
        self.orderId = orderId
        self.sold = sold
        self.tokenAddress = tokenAddress
        self.tokenId = tokenId
        self.tokenType = tokenType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case orderId = "order_id"
        case sold
        case tokenAddress = "token_address"
        case tokenId = "token_id"
        case tokenType = "token_type"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(orderId, forKey: .orderId)
        try container.encode(sold, forKey: .sold)
        try container.encodeIfPresent(tokenAddress, forKey: .tokenAddress)
        try container.encodeIfPresent(tokenId, forKey: .tokenId)
        try container.encode(tokenType, forKey: .tokenType)
    }
}

