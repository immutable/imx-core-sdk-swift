//
// MetadataSchemaRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MetadataSchemaRequest: Codable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case _enum = "enum"
        case text = "text"
        case boolean = "boolean"
        case continuous = "continuous"
        case discrete = "discrete"
    }
    /** Sets the metadata as filterable */
    public private(set) var filterable: Bool?
    /** Name of the metadata key */
    public private(set) var name: String
    /** Type of the metadata. Values: \"enum\", \"text\", \"boolean\", \"continuous\", \"discrete\" | Default: \"text\". Src: https://docs.x.immutable.com/docs/asset-metadata#property-type-mapping */
    public private(set) var type: ModelType?

    public init(filterable: Bool? = nil, name: String, type: ModelType? = nil) {
        self.filterable = filterable
        self.name = name
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case filterable
        case name
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(filterable, forKey: .filterable)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(type, forKey: .type)
    }
}

