//
// EncodingAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class EncodingAPI {

    /**
     Retrieves the Starkex Encoded format for a given asset
     
     - parameter assetType: (path) Asset type to be encoded. (asset/mintable-asset) 
     - parameter encodeAssetRequest: (body) Encode Asset 
     - returns: EncodeAssetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func encodeAsset(assetType: String, encodeAssetRequest: EncodeAssetRequest) async throws -> EncodeAssetResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = encodeAssetWithRequestBuilder(assetType: assetType, encodeAssetRequest: encodeAssetRequest).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Retrieves the Starkex Encoded format for a given asset
     - POST /v1/encode/{assetType}
     - Retrieves the Starkex Encoded format for a given asset so that it can be used as parameter for Starkex smart contracts
     - parameter assetType: (path) Asset type to be encoded. (asset/mintable-asset) 
     - parameter encodeAssetRequest: (body) Encode Asset 
     - returns: RequestBuilder<EncodeAssetResponse> 
     */
    open class func encodeAssetWithRequestBuilder(assetType: String, encodeAssetRequest: EncodeAssetRequest) -> RequestBuilder<EncodeAssetResponse> {
        var localVariablePath = "/v1/encode/{assetType}"
        let assetTypePreEscape = "\(APIHelper.mapValueToPathItem(assetType))"
        let assetTypePostEscape = assetTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{assetType}", with: assetTypePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: encodeAssetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EncodeAssetResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
