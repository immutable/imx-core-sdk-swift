//
// MetadataAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class MetadataAPI {

    /**
     Add metadata schema to collection
     
     - parameter address: (path) Collection contract address 
     - parameter iMXSignature: (header) String created by signing wallet address and timestamp 
     - parameter iMXTimestamp: (header) Unix Epoc timestamp 
     - parameter addMetadataSchemaToCollectionRequest: (body) add metadata schema to a collection 
     - returns: SuccessResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func addMetadataSchemaToCollection(address: String, iMXSignature: String, iMXTimestamp: String, addMetadataSchemaToCollectionRequest: AddMetadataSchemaToCollectionRequest) async throws -> SuccessResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = addMetadataSchemaToCollectionWithRequestBuilder(address: address, iMXSignature: iMXSignature, iMXTimestamp: iMXTimestamp, addMetadataSchemaToCollectionRequest: addMetadataSchemaToCollectionRequest).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Add metadata schema to collection
     - POST /v1/collections/{address}/metadata-schema
     - Add metadata schema to collection
     - parameter address: (path) Collection contract address 
     - parameter iMXSignature: (header) String created by signing wallet address and timestamp 
     - parameter iMXTimestamp: (header) Unix Epoc timestamp 
     - parameter addMetadataSchemaToCollectionRequest: (body) add metadata schema to a collection 
     - returns: RequestBuilder<SuccessResponse> 
     */
    open class func addMetadataSchemaToCollectionWithRequestBuilder(address: String, iMXSignature: String, iMXTimestamp: String, addMetadataSchemaToCollectionRequest: AddMetadataSchemaToCollectionRequest) -> RequestBuilder<SuccessResponse> {
        var localVariablePath = "/v1/collections/{address}/metadata-schema"
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: addMetadataSchemaToCollectionRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "IMX-Signature": iMXSignature.encodeToJSON(),
            "IMX-Timestamp": iMXTimestamp.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SuccessResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get collection metadata schema
     
     - parameter address: (path) Collection contract address 
     - returns: [MetadataSchemaProperty]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getMetadataSchema(address: String) async throws -> [MetadataSchemaProperty] {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = getMetadataSchemaWithRequestBuilder(address: address).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Get collection metadata schema
     - GET /v1/collections/{address}/metadata-schema
     - Get collection metadata schema
     - parameter address: (path) Collection contract address 
     - returns: RequestBuilder<[MetadataSchemaProperty]> 
     */
    open class func getMetadataSchemaWithRequestBuilder(address: String) -> RequestBuilder<[MetadataSchemaProperty]> {
        var localVariablePath = "/v1/collections/{address}/metadata-schema"
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[MetadataSchemaProperty]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update metadata schema by name
     
     - parameter address: (path) Collection contract address 
     - parameter name: (path) Metadata schema name 
     - parameter iMXSignature: (header) String created by signing wallet address and timestamp 
     - parameter iMXTimestamp: (header) Unix Epoc timestamp 
     - parameter metadataSchemaRequest: (body) update metadata schema 
     - returns: SuccessResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func updateMetadataSchemaByName(address: String, name: String, iMXSignature: String, iMXTimestamp: String, metadataSchemaRequest: MetadataSchemaRequest) async throws -> SuccessResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = updateMetadataSchemaByNameWithRequestBuilder(address: address, name: name, iMXSignature: iMXSignature, iMXTimestamp: iMXTimestamp, metadataSchemaRequest: metadataSchemaRequest).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Update metadata schema by name
     - PATCH /v1/collections/{address}/metadata-schema/{name}
     - Update metadata schema by name
     - parameter address: (path) Collection contract address 
     - parameter name: (path) Metadata schema name 
     - parameter iMXSignature: (header) String created by signing wallet address and timestamp 
     - parameter iMXTimestamp: (header) Unix Epoc timestamp 
     - parameter metadataSchemaRequest: (body) update metadata schema 
     - returns: RequestBuilder<SuccessResponse> 
     */
    open class func updateMetadataSchemaByNameWithRequestBuilder(address: String, name: String, iMXSignature: String, iMXTimestamp: String, metadataSchemaRequest: MetadataSchemaRequest) -> RequestBuilder<SuccessResponse> {
        var localVariablePath = "/v1/collections/{address}/metadata-schema/{name}"
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: metadataSchemaRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "IMX-Signature": iMXSignature.encodeToJSON(),
            "IMX-Timestamp": iMXTimestamp.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SuccessResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
