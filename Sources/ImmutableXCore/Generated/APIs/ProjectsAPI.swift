//
// ProjectsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal class ProjectsAPI {

    /**
     Create a project
     
     - parameter iMXSignature: (header) String created by signing wallet address and timestamp 
     - parameter iMXTimestamp: (header) Unix Epoc timestamp 
     - parameter createProjectRequest: (body) create a project 
     - returns: CreateProjectResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func createProject(iMXSignature: String, iMXTimestamp: String, createProjectRequest: CreateProjectRequest) async throws -> CreateProjectResponse {
        let requestBuilder = createProjectWithRequestBuilder(iMXSignature: iMXSignature, iMXTimestamp: iMXTimestamp, createProjectRequest: createProjectRequest)
        let requestTask = requestBuilder.requestTask
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestBuilder.execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: {
            requestTask.cancel()
        }
    }

    /**
     Create a project
     - POST /v1/projects
     - Create a project
     - parameter iMXSignature: (header) String created by signing wallet address and timestamp 
     - parameter iMXTimestamp: (header) Unix Epoc timestamp 
     - parameter createProjectRequest: (body) create a project 
     - returns: RequestBuilder<CreateProjectResponse> 
     */
    internal class func createProjectWithRequestBuilder(iMXSignature: String, iMXTimestamp: String, createProjectRequest: CreateProjectRequest) -> RequestBuilder<CreateProjectResponse> {
        let localVariablePath = "/v1/projects"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createProjectRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "IMX-Signature": iMXSignature.encodeToJSON(),
            "IMX-Timestamp": iMXTimestamp.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateProjectResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get a project
     
     - parameter id: (path) Project ID 
     - parameter iMXSignature: (header) String created by signing wallet address and timestamp 
     - parameter iMXTimestamp: (header) Unix Epoc timestamp 
     - returns: Project
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func getProject(id: String, iMXSignature: String, iMXTimestamp: String) async throws -> Project {
        let requestBuilder = getProjectWithRequestBuilder(id: id, iMXSignature: iMXSignature, iMXTimestamp: iMXTimestamp)
        let requestTask = requestBuilder.requestTask
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestBuilder.execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: {
            requestTask.cancel()
        }
    }

    /**
     Get a project
     - GET /v1/projects/{id}
     - Get a project
     - parameter id: (path) Project ID 
     - parameter iMXSignature: (header) String created by signing wallet address and timestamp 
     - parameter iMXTimestamp: (header) Unix Epoc timestamp 
     - returns: RequestBuilder<Project> 
     */
    internal class func getProjectWithRequestBuilder(id: String, iMXSignature: String, iMXTimestamp: String) -> RequestBuilder<Project> {
        var localVariablePath = "/v1/projects/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "IMX-Signature": iMXSignature.encodeToJSON(),
            "IMX-Timestamp": iMXTimestamp.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Project>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get projects
     
     - parameter iMXSignature: (header) String created by signing wallet address and timestamp 
     - parameter iMXTimestamp: (header) Unix Epoc timestamp 
     - parameter pageSize: (query) Page size of the result (optional)
     - parameter cursor: (query) Cursor (optional)
     - parameter orderBy: (query) Property to sort by (optional)
     - parameter direction: (query) Direction to sort (asc/desc) (optional)
     - returns: GetProjectsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func getProjects(iMXSignature: String, iMXTimestamp: String, pageSize: Int? = nil, cursor: String? = nil, orderBy: String? = nil, direction: String? = nil) async throws -> GetProjectsResponse {
        let requestBuilder = getProjectsWithRequestBuilder(iMXSignature: iMXSignature, iMXTimestamp: iMXTimestamp, pageSize: pageSize, cursor: cursor, orderBy: orderBy, direction: direction)
        let requestTask = requestBuilder.requestTask
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestBuilder.execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: {
            requestTask.cancel()
        }
    }

    /**
     Get projects
     - GET /v1/projects
     - Get projects
     - parameter iMXSignature: (header) String created by signing wallet address and timestamp 
     - parameter iMXTimestamp: (header) Unix Epoc timestamp 
     - parameter pageSize: (query) Page size of the result (optional)
     - parameter cursor: (query) Cursor (optional)
     - parameter orderBy: (query) Property to sort by (optional)
     - parameter direction: (query) Direction to sort (asc/desc) (optional)
     - returns: RequestBuilder<GetProjectsResponse> 
     */
    internal class func getProjectsWithRequestBuilder(iMXSignature: String, iMXTimestamp: String, pageSize: Int? = nil, cursor: String? = nil, orderBy: String? = nil, direction: String? = nil) -> RequestBuilder<GetProjectsResponse> {
        let localVariablePath = "/v1/projects"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: false),
            "cursor": (wrappedValue: cursor?.encodeToJSON(), isExplode: false),
            "order_by": (wrappedValue: orderBy?.encodeToJSON(), isExplode: false),
            "direction": (wrappedValue: direction?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "IMX-Signature": iMXSignature.encodeToJSON(),
            "IMX-Timestamp": iMXTimestamp.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetProjectsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
