//
// TradesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class TradesAPI {

    /**
     Create a Trade between two parties
     
     - parameter xImxEthAddress: (header) eth address 
     - parameter xImxEthSignature: (header) eth signature 
     - parameter createTradeRequest: (body) create a trade 
     - returns: CreateTradeResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func createTrade(xImxEthAddress: String, xImxEthSignature: String, createTradeRequest: CreateTradeRequestV1) async throws -> CreateTradeResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = createTradeWithRequestBuilder(xImxEthAddress: xImxEthAddress, xImxEthSignature: xImxEthSignature, createTradeRequest: createTradeRequest).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Create a Trade between two parties
     - POST /v1/trades
     - Create a Trade
     - parameter xImxEthAddress: (header) eth address 
     - parameter xImxEthSignature: (header) eth signature 
     - parameter createTradeRequest: (body) create a trade 
     - returns: RequestBuilder<CreateTradeResponse> 
     */
    open class func createTradeWithRequestBuilder(xImxEthAddress: String, xImxEthSignature: String, createTradeRequest: CreateTradeRequestV1) -> RequestBuilder<CreateTradeResponse> {
        let localVariablePath = "/v1/trades"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createTradeRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "x-imx-eth-address": xImxEthAddress.encodeToJSON(),
            "x-imx-eth-signature": xImxEthSignature.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateTradeResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get details a signable trade V3
     
     - parameter getSignableTradeRequest: (body) get a signable trade 
     - returns: GetSignableTradeResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getSignableTrade(getSignableTradeRequest: GetSignableTradeRequest) async throws -> GetSignableTradeResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = getSignableTradeWithRequestBuilder(getSignableTradeRequest: getSignableTradeRequest).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Get details a signable trade V3
     - POST /v3/signable-trade-details
     - Get details a signable trade V3
     - parameter getSignableTradeRequest: (body) get a signable trade 
     - returns: RequestBuilder<GetSignableTradeResponse> 
     */
    open class func getSignableTradeWithRequestBuilder(getSignableTradeRequest: GetSignableTradeRequest) -> RequestBuilder<GetSignableTradeResponse> {
        let localVariablePath = "/v3/signable-trade-details"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getSignableTradeRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetSignableTradeResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get details of a trade with the given ID
     
     - parameter id: (path) Trade ID 
     - returns: Trade
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getTrade(id: String) async throws -> Trade {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = getTradeWithRequestBuilder(id: id).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Get details of a trade with the given ID
     - GET /v1/trades/{id}
     - Get details of a trade with the given ID
     - parameter id: (path) Trade ID 
     - returns: RequestBuilder<Trade> 
     */
    open class func getTradeWithRequestBuilder(id: String) -> RequestBuilder<Trade> {
        var localVariablePath = "/v1/trades/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Trade>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get a list of trades
     
     - parameter partyAOrderId: (query) Party A&#39;s (buy order) order id (optional)
     - parameter partyATokenType: (query) Party A&#39;s (buy order) token type of currency used to buy (optional)
     - parameter partyATokenAddress: (query) Party A&#39;s (buy order) token address of currency used to buy (optional)
     - parameter partyBOrderId: (query) Party B&#39;s (sell order) order id (optional)
     - parameter partyBTokenType: (query) Party B&#39;s (sell order) token type of NFT sold - always ERC721 (optional)
     - parameter partyBTokenAddress: (query) Party B&#39;s (sell order) collection address of NFT sold (optional)
     - parameter partyBTokenId: (query) Party B&#39;s (sell order) token id of NFT sold (optional)
     - parameter pageSize: (query) Page size of the result (optional)
     - parameter cursor: (query) Cursor (optional)
     - parameter orderBy: (query) Property to sort by (optional)
     - parameter direction: (query) Direction to sort (asc/desc) (optional)
     - parameter minTimestamp: (query) Minimum timestamp for this trade, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)
     - parameter maxTimestamp: (query) Maximum timestamp for this trade, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)
     - returns: ListTradesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listTrades(partyAOrderId: String? = nil, partyATokenType: String? = nil, partyATokenAddress: String? = nil, partyBOrderId: String? = nil, partyBTokenType: String? = nil, partyBTokenAddress: String? = nil, partyBTokenId: String? = nil, pageSize: Int? = nil, cursor: String? = nil, orderBy: String? = nil, direction: String? = nil, minTimestamp: String? = nil, maxTimestamp: String? = nil) async throws -> ListTradesResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = listTradesWithRequestBuilder(partyAOrderId: partyAOrderId, partyATokenType: partyATokenType, partyATokenAddress: partyATokenAddress, partyBOrderId: partyBOrderId, partyBTokenType: partyBTokenType, partyBTokenAddress: partyBTokenAddress, partyBTokenId: partyBTokenId, pageSize: pageSize, cursor: cursor, orderBy: orderBy, direction: direction, minTimestamp: minTimestamp, maxTimestamp: maxTimestamp).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Get a list of trades
     - GET /v1/trades
     - Get a list of trades
     - parameter partyAOrderId: (query) Party A&#39;s (buy order) order id (optional)
     - parameter partyATokenType: (query) Party A&#39;s (buy order) token type of currency used to buy (optional)
     - parameter partyATokenAddress: (query) Party A&#39;s (buy order) token address of currency used to buy (optional)
     - parameter partyBOrderId: (query) Party B&#39;s (sell order) order id (optional)
     - parameter partyBTokenType: (query) Party B&#39;s (sell order) token type of NFT sold - always ERC721 (optional)
     - parameter partyBTokenAddress: (query) Party B&#39;s (sell order) collection address of NFT sold (optional)
     - parameter partyBTokenId: (query) Party B&#39;s (sell order) token id of NFT sold (optional)
     - parameter pageSize: (query) Page size of the result (optional)
     - parameter cursor: (query) Cursor (optional)
     - parameter orderBy: (query) Property to sort by (optional)
     - parameter direction: (query) Direction to sort (asc/desc) (optional)
     - parameter minTimestamp: (query) Minimum timestamp for this trade, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)
     - parameter maxTimestamp: (query) Maximum timestamp for this trade, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)
     - returns: RequestBuilder<ListTradesResponse> 
     */
    open class func listTradesWithRequestBuilder(partyAOrderId: String? = nil, partyATokenType: String? = nil, partyATokenAddress: String? = nil, partyBOrderId: String? = nil, partyBTokenType: String? = nil, partyBTokenAddress: String? = nil, partyBTokenId: String? = nil, pageSize: Int? = nil, cursor: String? = nil, orderBy: String? = nil, direction: String? = nil, minTimestamp: String? = nil, maxTimestamp: String? = nil) -> RequestBuilder<ListTradesResponse> {
        let localVariablePath = "/v1/trades"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "party_a_order_id": partyAOrderId?.encodeToJSON(),
            "party_a_token_type": partyATokenType?.encodeToJSON(),
            "party_a_token_address": partyATokenAddress?.encodeToJSON(),
            "party_b_order_id": partyBOrderId?.encodeToJSON(),
            "party_b_token_type": partyBTokenType?.encodeToJSON(),
            "party_b_token_address": partyBTokenAddress?.encodeToJSON(),
            "party_b_token_id": partyBTokenId?.encodeToJSON(),
            "page_size": pageSize?.encodeToJSON(),
            "cursor": cursor?.encodeToJSON(),
            "order_by": orderBy?.encodeToJSON(),
            "direction": direction?.encodeToJSON(),
            "min_timestamp": minTimestamp?.encodeToJSON(),
            "max_timestamp": maxTimestamp?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListTradesResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
