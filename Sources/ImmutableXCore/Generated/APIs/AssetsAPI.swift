//
// AssetsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AssetsAPI {

    /**
     Get details of an asset
     
     - parameter tokenAddress: (path) Address of the ERC721 contract 
     - parameter tokenId: (path) Either ERC721 token ID or internal IMX ID 
     - parameter includeFees: (query) Set flag to include fees associated with the asset (optional)
     - returns: Asset
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getAsset(tokenAddress: String, tokenId: String, includeFees: Bool? = nil) async throws -> Asset {
        let requestBuilder = getAssetWithRequestBuilder(tokenAddress: tokenAddress, tokenId: tokenId, includeFees: includeFees)
        let requestTask = requestBuilder.requestTask
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestBuilder.execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: {
            requestTask.cancel()
        }
    }

    /**
     Get details of an asset
     - GET /v1/assets/{token_address}/{token_id}
     - Get details of an asset
     - parameter tokenAddress: (path) Address of the ERC721 contract 
     - parameter tokenId: (path) Either ERC721 token ID or internal IMX ID 
     - parameter includeFees: (query) Set flag to include fees associated with the asset (optional)
     - returns: RequestBuilder<Asset> 
     */
    open class func getAssetWithRequestBuilder(tokenAddress: String, tokenId: String, includeFees: Bool? = nil) -> RequestBuilder<Asset> {
        var localVariablePath = "/v1/assets/{token_address}/{token_id}"
        let tokenAddressPreEscape = "\(APIHelper.mapValueToPathItem(tokenAddress))"
        let tokenAddressPostEscape = tokenAddressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{token_address}", with: tokenAddressPostEscape, options: .literal, range: nil)
        let tokenIdPreEscape = "\(APIHelper.mapValueToPathItem(tokenId))"
        let tokenIdPostEscape = tokenIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{token_id}", with: tokenIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "include_fees": (wrappedValue: includeFees?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Asset>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter orderBy
     */
    public enum OrderBy_listAssets: String, CaseIterable {
        case updatedAt = "updated_at"
        case name = "name"
    }

    /**
     Get a list of assets
     
     - parameter pageSize: (query) Page size of the result (optional)
     - parameter cursor: (query) Cursor (optional)
     - parameter orderBy: (query) Property to sort by (optional)
     - parameter direction: (query) Direction to sort (asc/desc) (optional)
     - parameter user: (query) Ethereum address of the user who owns these assets (optional)
     - parameter status: (query) Status of these assets (optional)
     - parameter name: (query) Name of the asset to search (optional)
     - parameter metadata: (query) JSON-encoded metadata filters for these asset. Example: {&#39;proto&#39;:[&#39;1147&#39;],&#39;quality&#39;:[&#39;Meteorite&#39;]} (optional)
     - parameter sellOrders: (query) Set flag to true to fetch an array of sell order details with accepted status associated with the asset (optional)
     - parameter buyOrders: (query) Set flag to true to fetch an array of buy order details  with accepted status associated with the asset (optional)
     - parameter includeFees: (query) Set flag to include fees associated with the asset (optional)
     - parameter collection: (query) Collection contract address (optional)
     - parameter updatedMinTimestamp: (query) Minimum timestamp for when these assets were last updated, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)
     - parameter updatedMaxTimestamp: (query) Maximum timestamp for when these assets were last updated, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)
     - parameter auxiliaryFeePercentages: (query) Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients (optional)
     - parameter auxiliaryFeeRecipients: (query) Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages (optional)
     - returns: ListAssetsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listAssets(pageSize: Int? = nil, cursor: String? = nil, orderBy: OrderBy_listAssets? = nil, direction: String? = nil, user: String? = nil, status: String? = nil, name: String? = nil, metadata: String? = nil, sellOrders: Bool? = nil, buyOrders: Bool? = nil, includeFees: Bool? = nil, collection: String? = nil, updatedMinTimestamp: String? = nil, updatedMaxTimestamp: String? = nil, auxiliaryFeePercentages: String? = nil, auxiliaryFeeRecipients: String? = nil) async throws -> ListAssetsResponse {
        let requestBuilder = listAssetsWithRequestBuilder(pageSize: pageSize, cursor: cursor, orderBy: orderBy, direction: direction, user: user, status: status, name: name, metadata: metadata, sellOrders: sellOrders, buyOrders: buyOrders, includeFees: includeFees, collection: collection, updatedMinTimestamp: updatedMinTimestamp, updatedMaxTimestamp: updatedMaxTimestamp, auxiliaryFeePercentages: auxiliaryFeePercentages, auxiliaryFeeRecipients: auxiliaryFeeRecipients)
        let requestTask = requestBuilder.requestTask
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestBuilder.execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: {
            requestTask.cancel()
        }
    }

    /**
     Get a list of assets
     - GET /v1/assets
     - Get a list of assets
     - parameter pageSize: (query) Page size of the result (optional)
     - parameter cursor: (query) Cursor (optional)
     - parameter orderBy: (query) Property to sort by (optional)
     - parameter direction: (query) Direction to sort (asc/desc) (optional)
     - parameter user: (query) Ethereum address of the user who owns these assets (optional)
     - parameter status: (query) Status of these assets (optional)
     - parameter name: (query) Name of the asset to search (optional)
     - parameter metadata: (query) JSON-encoded metadata filters for these asset. Example: {&#39;proto&#39;:[&#39;1147&#39;],&#39;quality&#39;:[&#39;Meteorite&#39;]} (optional)
     - parameter sellOrders: (query) Set flag to true to fetch an array of sell order details with accepted status associated with the asset (optional)
     - parameter buyOrders: (query) Set flag to true to fetch an array of buy order details  with accepted status associated with the asset (optional)
     - parameter includeFees: (query) Set flag to include fees associated with the asset (optional)
     - parameter collection: (query) Collection contract address (optional)
     - parameter updatedMinTimestamp: (query) Minimum timestamp for when these assets were last updated, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)
     - parameter updatedMaxTimestamp: (query) Maximum timestamp for when these assets were last updated, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)
     - parameter auxiliaryFeePercentages: (query) Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients (optional)
     - parameter auxiliaryFeeRecipients: (query) Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages (optional)
     - returns: RequestBuilder<ListAssetsResponse> 
     */
    open class func listAssetsWithRequestBuilder(pageSize: Int? = nil, cursor: String? = nil, orderBy: OrderBy_listAssets? = nil, direction: String? = nil, user: String? = nil, status: String? = nil, name: String? = nil, metadata: String? = nil, sellOrders: Bool? = nil, buyOrders: Bool? = nil, includeFees: Bool? = nil, collection: String? = nil, updatedMinTimestamp: String? = nil, updatedMaxTimestamp: String? = nil, auxiliaryFeePercentages: String? = nil, auxiliaryFeeRecipients: String? = nil) -> RequestBuilder<ListAssetsResponse> {
        let localVariablePath = "/v1/assets"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: false),
            "cursor": (wrappedValue: cursor?.encodeToJSON(), isExplode: false),
            "order_by": (wrappedValue: orderBy?.encodeToJSON(), isExplode: false),
            "direction": (wrappedValue: direction?.encodeToJSON(), isExplode: false),
            "user": (wrappedValue: user?.encodeToJSON(), isExplode: false),
            "status": (wrappedValue: status?.encodeToJSON(), isExplode: false),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: false),
            "metadata": (wrappedValue: metadata?.encodeToJSON(), isExplode: false),
            "sell_orders": (wrappedValue: sellOrders?.encodeToJSON(), isExplode: false),
            "buy_orders": (wrappedValue: buyOrders?.encodeToJSON(), isExplode: false),
            "include_fees": (wrappedValue: includeFees?.encodeToJSON(), isExplode: false),
            "collection": (wrappedValue: collection?.encodeToJSON(), isExplode: false),
            "updated_min_timestamp": (wrappedValue: updatedMinTimestamp?.encodeToJSON(), isExplode: false),
            "updated_max_timestamp": (wrappedValue: updatedMaxTimestamp?.encodeToJSON(), isExplode: false),
            "auxiliary_fee_percentages": (wrappedValue: auxiliaryFeePercentages?.encodeToJSON(), isExplode: false),
            "auxiliary_fee_recipients": (wrappedValue: auxiliaryFeeRecipients?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListAssetsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
